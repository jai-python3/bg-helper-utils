{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to BG Helper Utils","text":"<p>This GitHub project serves as a valuable collection of Python convenience scripts designed to streamline various background tasks. The focus of this repository is on enhancing efficiency by providing easy-to-use console scripts. The two key exported console scripts included in this collection are:</p> <p>find-batch-analysis-dir: This script is tailored to facilitate the location of batch analysis directories. It proves to be a handy tool for navigating and managing batch-related tasks efficiently.</p> <p>find-samplesheet: The find-samplesheet script is crafted to simplify the process of locating sample sheets. This is particularly useful for tasks involving data analysis and sample management, offering a quick and efficient way to access relevant information.</p> <p>Users can benefit from the simplicity and functionality of these Python scripts, making them an essential addition to any project involving background tasks. Whether you are working on data analysis, batch processing, or sample management, these scripts contribute to a smoother workflow by providing convenient solutions to common challenges. Explore and integrate these scripts into your Python projects to enhance productivity and streamline your background tasks.</p>"},{"location":"#commands","title":"Commands","text":"<p>The following exported scripts are available:</p> <ul> <li>find-batch-analysis-dir</li> <li>find-samplesheet</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>GitHub</li> <li>PYPI</li> </ul>"},{"location":"INSTALL/","title":"INSTALL","text":""},{"location":"INSTALL/#clone-project","title":"Clone project","text":"<p>You can <code>git clone</code> this project.</p> <pre><code>git clone https://github.com/jai-python3/bg-helper-utils.git\ncd bg-helper-utils\n</code></pre>"},{"location":"INSTALL/#local-pip-install","title":"Local pip install","text":"<p>You can optionally establish a Python virtual environment. Then you can run the <code>setup.py</code> script to build to project and then run <code>pip install</code> to install in your local Python virtual environment.</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#uninstall","title":"Uninstall","text":"<p>You can uninstall like this:</p> <pre><code>source venv/bin/activate\npip uninstall bg-helper-utils\nmake clean\n</code></pre>"},{"location":"INSTALL/#developers","title":"Developers","text":"<p>If you modify the code in this package in your local virtual environment:</p> <pre><code>pip uninstall bg-helper-utils\nmake clean\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#publish-to-pypi","title":"Publish to PYPI","text":"<p>You want can publish the code in this package to the PYPI repository.</p>"},{"location":"INSTALL/#install-twine-and-setuptools","title":"Install twine and setuptools","text":"<p>Install <code>twine</code> and <code>setuptools</code>.</p> <pre><code>pip install twine setuptools\n</code></pre>"},{"location":"INSTALL/#build-the-distribution-package","title":"Build the Distribution Package","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre>"},{"location":"INSTALL/#configure-your-pypirc","title":"Configure your ~/.pypirc:","text":"<pre><code>[pypi]\n  username = __token__\n  password = pypi-YOUR-TOKEN\n</code></pre>"},{"location":"INSTALL/#upload-your-package-to-pypi","title":"Upload Your Package to PyPI","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"INSTALL/#install-from-pypi","title":"Install from PYPI","text":"<p>Now you can install your package in your Python virtual environment</p> <pre><code>pip install bg-helper-utils\n</code></pre>"},{"location":"console_helper/","title":"Console Helper module","text":"<p>Module for console helper functions.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If msg is not defined</p>"},{"location":"console_helper/#bg_helper_utils.console_helper.print_green","title":"<code>print_green(msg=None)</code>","text":"<p>Print a message in green.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed in red. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If msg is not defined</p> Source code in <code>bg_helper_utils/console_helper.py</code> <pre><code>def print_green(msg: str = None) -&gt; None:\n    \"\"\"Print a message in green.\n\n    Args:\n        msg (str, optional): The message to be printed in red. Defaults to None.\n\n    Raises:\n        Exception: If msg is not defined\n    \"\"\"\n    if msg is None or msg == \"\":\n        raise Exception(\"msg was not defined\")\n\n    console.print(f\"[bold green]{msg}[/]\")\n</code></pre>"},{"location":"console_helper/#bg_helper_utils.console_helper.print_red","title":"<code>print_red(msg=None)</code>","text":"<p>Print a message in red.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed in red. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If msg is not defined</p> Source code in <code>bg_helper_utils/console_helper.py</code> <pre><code>def print_red(msg: str = None) -&gt; None:\n    \"\"\"Print a message in red.\n\n    Args:\n        msg (str, optional): The message to be printed in red. Defaults to None.\n\n    Raises:\n        Exception: If msg is not defined\n    \"\"\"\n    if msg is None or msg == \"\":\n        raise Exception(\"msg was not defined\")\n    error_console.print(msg)\n</code></pre>"},{"location":"console_helper/#bg_helper_utils.console_helper.print_yellow","title":"<code>print_yellow(msg=None)</code>","text":"<p>Print a message in yellow.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed in red. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>Exception</code> <p>If msg is not defined</p> Source code in <code>bg_helper_utils/console_helper.py</code> <pre><code>def print_yellow(msg: str = None) -&gt; None:\n    \"\"\"Print a message in yellow.\n\n    Args:\n        msg (str, optional): The message to be printed in red. Defaults to None.\n\n    Raises:\n        Exception: If msg is not defined\n    \"\"\"\n    if msg is None or msg == \"\":\n        raise Exception(\"msg was not defined\")\n\n    console.print(f\"[bold yellow]{msg}[/]\")\n</code></pre>"},{"location":"file_utils/","title":"File Utils module","text":""},{"location":"file_utils/#bg_helper_utils.file_utils.calculate_md5","title":"<code>calculate_md5(file_path)</code>","text":"<p>Calculate the md5 checksum for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the file for which the md5 checksum will be calculated</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the calculated md5 checksum</p> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def calculate_md5(file_path: str) -&gt; str:\n    \"\"\"Calculate the md5 checksum for the specified file.\n\n    Args:\n        file_path (str): the file for which the md5 checksum will be calculated\n\n    Returns:\n        str: the calculated md5 checksum\n    \"\"\"\n    md5_hash = hashlib.md5()\n    logging.info(f\"Will attempt to calculate the MD5 checksum for file '{file_path}'\")\n\n    with open(file_path, \"rb\") as file:\n        # Read the file in chunks to efficiently handle large files\n        for chunk in iter(lambda: file.read(4096), b\"\"):\n            md5_hash.update(chunk)\n\n    return md5_hash.hexdigest()\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.check_indir_status","title":"<code>check_indir_status(indir=None)</code>","text":"<p>Check if the directory exists and is a regular directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to be checked</p> <code>None</code> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def check_indir_status(indir: str = None) -&gt; None:\n    \"\"\"Check if the directory exists and is a regular directory.\n\n    Args:\n        indir (str): the directory to be checked\n    \"\"\"\n    error_ctr = 0\n\n    if indir is None or indir == '':\n        error_console.print(f\"'{indir}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(indir):\n            error_ctr += 1\n            error_console.print(f\"directory '{indir}' does not exist\")\n        else:\n            if not os.path.isdir(indir):\n                error_ctr += 1\n                error_console.print(f\"'{indir}' is not a regular directory\")\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input directory '{indir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.check_infile_status","title":"<code>check_infile_status(infile, extension=None)</code>","text":"<p>Check if the file exists, if it is a regular file and whether it has content.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>the file to be checked</p> required Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def check_infile_status(infile: str, extension: Optional[str] = None) -&gt; None:\n    \"\"\"Check if the file exists, if it is a regular file and whether it has\n    content.\n\n    Args:\n        infile (str): the file to be checked\n\n    Raises:\n        None\n    \"\"\"\n\n    error_ctr = 0\n\n    if infile is None or infile == \"\":\n        error_console.print(f\"'{infile}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(infile):\n            error_ctr += 1\n            error_console.print(f\"'{infile}' does not exist\")\n        else:\n            if not os.path.isfile(infile):\n                error_ctr += 1\n                error_console.print(f\"'{infile}' is not a regular file\")\n            if os.stat(infile).st_size == 0:\n                error_console.print(f\"'{infile}' has no content\")\n                error_ctr += 1\n            if extension is not None and not infile.endswith(extension):\n                error_console.print(\n                    f\"'{infile}' does not have filename extension '{extension}'\"\n                )\n                error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input file '{infile}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.get_file_creation_date","title":"<code>get_file_creation_date(file_path)</code>","text":"<p>Determine the creation date for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the absolute path of the file</p> required <p>Returns:</p> Name Type Description <code>datetime</code> <code>datetime</code> <p>the date the file was created according to the operating system</p> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def get_file_creation_date(file_path: str) -&gt; datetime:\n    \"\"\"Determine the creation date for the specified file.\n\n    Args:\n        file_path (str): the absolute path of the file\n\n    Returns:\n        datetime: the date the file was created according to the operating system\n    \"\"\"\n    if platform.system() == \"Windows\":\n        # On Windows, use creation time\n        creation_time = os.path.getctime(file_path)\n    else:\n        # On Unix-based systems, use birth time (creation time)\n        # Note: Not all file systems support birth time, and it might not be available on some systems.\n        stat_info = os.stat(file_path)\n        creation_time = stat_info.st_mtime\n\n    # Convert the timestamp to a readable date\n    creation_date = datetime.fromtimestamp(creation_time)\n\n    return creation_date\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.get_file_list_from_directory","title":"<code>get_file_list_from_directory(indir=None, extension=None)</code>","text":"<p>Get the list of files in the specified directory :param indir: {str} - the directory to search for files :param extension: {str} - the file extension to filter on :returns file_list: {list} - the list of files found in the directory</p> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def get_file_list_from_directory(indir: str = None, extension: str = None) -&gt; list:\n    \"\"\"Get the list of files in the specified directory\n    :param indir: {str} - the directory to search for files\n    :param extension: {str} - the file extension to filter on\n    :returns file_list: {list} - the list of files found in the directory\n    \"\"\"\n    if extension is None:\n        logging.info(f\"Going to search for files in directory '{indir}'\")\n    else:\n        logging.info(f\"Going to search for files with extension '{extension}' in directory '{indir}'\")\n\n    file_list = []\n    for dirpath, dirnames, filenames in os.walk(indir):\n        if 'venv' in dirpath:\n            logging.info(f\"Going to ignore files in directory '{dirpath}'\")\n            continue\n        for name in filenames:\n            file_path = os.path.normpath(os.path.join(dirpath, name))\n            if os.path.isfile(file_path):\n                if extension is not None:\n                    if file_path.endswith(f'.{extension}'):\n                        file_list.append(file_path)\n                else:\n                    file_list.append(file_path)\n\n    return file_list\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.get_file_size","title":"<code>get_file_size(file_path)</code>","text":"<p>Get the size of the specified file in bytes.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the file to be checked.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the file does not exist.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The size of the file in bytes.</p> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def get_file_size(file_path: str) -&gt; int:\n    \"\"\"Get the size of the specified file in bytes.\n\n    Args:\n        file_path (str): The path to the file to be checked.\n\n    Raises:\n        Exception: If the file does not exist.\n\n    Returns:\n        int: The size of the file in bytes.\n    \"\"\"\n    # Check if the file exists\n    if os.path.exists(file_path):\n        # Get the file size in bytes\n        file_size = os.path.getsize(file_path)\n        return file_size\n    else:\n        raise Exception(f\"The file '{file_path}' does not exist.\")\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.get_line_count","title":"<code>get_line_count(file_path)</code>","text":"<p>Get the number of lines in the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the file to be checked.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of lines in the file.</p> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def get_line_count(file_path: str) -&gt; int:\n    \"\"\"Get the number of lines in the specified file.\n\n    Args:\n        file_path (str): The path to the file to be checked.\n\n    Returns:\n        int: The number of lines in the file.\n    \"\"\"\n    # if is_binary_file(file_path):\n    #     print(f\"Unable to get line count for binary file '{file_path}'\")\n    #     return None\n    try:\n        with open(file_path, 'r') as file:\n            line_count = sum(1 for line in file)\n        return line_count\n    except FileNotFoundError:\n        print(f\"File '{file_path}' not found.\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n</code></pre>"},{"location":"file_utils/#bg_helper_utils.file_utils.is_binary_file","title":"<code>is_binary_file(file_path, block_size=1024)</code>","text":"<p>Check if the specified file is a binary file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the file to be checked.</p> required <code>block_size</code> <code>int</code> <p>The block size. Defaults to 1024.</p> <code>1024</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>If the file is binary, returns True. Otherwise, returns False.</p> Source code in <code>bg_helper_utils/file_utils.py</code> <pre><code>def is_binary_file(file_path: str, block_size: int = 1024) -&gt; bool:\n    \"\"\"Check if the specified file is a binary file.\n\n    Args:\n        file_path (str): The path to the file to be checked.\n        block_size (int, optional): The block size. Defaults to 1024.\n\n    Returns:\n        bool: If the file is binary, returns True. Otherwise, returns False.\n    \"\"\"\n    try:\n        with open(file_path, 'rb') as file:\n            block = file.read(block_size)\n            if not block:  # Empty file\n                return False\n\n            # Check for the presence of null bytes (indicative of binary files)\n            if b'\\x00' in block:\n                return True\n\n            # Check for a significant number of non-printable ASCII characters\n            text_characters = set(string.printable)\n            if not all(byte in text_characters or byte == b'\\n' for byte in block):\n                return True\n\n            return False  # File is likely text\n\n    except FileNotFoundError:\n        print(f\"File '{file_path}' not found.\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n</code></pre>"},{"location":"find_batch_analysis_dir/","title":"Find Batch Analysis Dir module","text":"<p>Find the batch analysis directory.</p> <p>Interactively prompts for the batch ID and analysis type and then finds the batch analysis directory.</p>"},{"location":"find_batch_analysis_dir/#bg_helper_utils.find_batch_analysis_dir.find_batch_analysis_dir","title":"<code>find_batch_analysis_dir(config_file, config, logfile, outdir, outfile, profile=DEFAULT_PROFILE_DIR_FILES)</code>","text":"<p>Find the samplesheet.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>The configuration file path.</p> required <code>config</code> <code>Dict[str, Any]</code> <p>The configuration.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>outfile</code> <code>str</code> <p>The output file.</p> required <code>profile</code> <code>bool</code> <p>If set to True, will profile all files in the batch analysis directory. Defaults to DEFAULT_PROFILE_DIR_FILES.</p> <code>DEFAULT_PROFILE_DIR_FILES</code> Source code in <code>bg_helper_utils/find_batch_analysis_dir.py</code> <pre><code>def find_batch_analysis_dir(\n        config_file: str,\n        config: Dict[str, Any],\n        logfile: str,\n        outdir: str,\n        outfile: str,\n        profile: bool = DEFAULT_PROFILE_DIR_FILES) -&gt; None:\n    \"\"\"Find the samplesheet.\n\n    Args:\n        config_file (str): The configuration file path.\n        config (Dict[str, Any]): The configuration.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        outfile (str): The output file.\n        profile (bool, optional): If set to True, will profile all files in the batch analysis directory. Defaults to DEFAULT_PROFILE_DIR_FILES.\n    \"\"\"\n\n    if \"analysis_base_dir\" not in config:\n        raise Exception(f\"Could not find 'analysis_base_dir' in config file '{config_file}'\")\n\n    analysis_base_dir= config[\"analysis_base_dir\"]\n    check_indir_status(analysis_base_dir)\n\n    analysis_type = get_analyis_type()\n    batch_id = get_batch_id()\n\n    if \"batch_analysis\" not in config:\n        raise Exception(f\"Could not find 'batch_analysis' in config file '{config_file}'\")\n\n    if \"analysis_file_type_mapping\" not in config[\"batch_analysis\"]:\n        raise Exception(f\"Could not find 'analysis_file_type_mapping' in 'batch_analysis' section in config file '{config_file}'\")\n\n    if analysis_type not in config[\"batch_analysis\"][\"analysis_file_type_mapping\"]:\n        raise Exception(f\"Could not find analysis type '{analysis_type}' in 'analysis_file_type_mapping' in 'batch_analysis' section in config file '{config_file}'\")\n\n    analysis_file_type = config[\"batch_analysis\"][\"analysis_file_type_mapping\"][analysis_type]\n\n    analysis_dir = os.path.join(analysis_base_dir, analysis_file_type, batch_id)\n\n    check_indir_status(analysis_dir)\n\n    if profile:\n        console.print(f\"[bold green]Profiling batch analysis directory[/] '{analysis_dir}'\")\n        profile_dir_files(analysis_dir, outfile, logfile, config_file)\n    else:\n        console.print(f\"[bold green]Found batch analysis directory[/] '{analysis_dir}'\")\n</code></pre>"},{"location":"find_batch_analysis_dir/#bg_helper_utils.find_batch_analysis_dir.generate_report","title":"<code>generate_report(lookup, analysis_dir, outfile, logfile, config_file, count)</code>","text":"<p>Generate a summary report.</p> <p>Parameters:</p> Name Type Description Default <code>lookup</code> <code>Dict[str, Dict[str, str]]</code> <p>The lookup containing metadata for all of the files profiled.</p> required <code>analysis_dir</code> <code>str</code> <p>The batch analysis directory.</p> required <code>outfile</code> <code>str</code> <p>The output file.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>config_file</code> <code>str</code> <p>The configuration file.</p> required <code>count</code> <code>int</code> <p>The number of files.</p> required Source code in <code>bg_helper_utils/find_batch_analysis_dir.py</code> <pre><code>def generate_report(lookup: Dict[str, Dict[str, str]], analysis_dir: str, outfile: str, logfile: str, config_file: str, count: int) -&gt; None:\n    \"\"\"Generate a summary report.\n\n    Args:\n        lookup (Dict[str, Dict[str, str]]): The lookup containing metadata for all of the files profiled.\n        analysis_dir (str): The batch analysis directory.\n        outfile (str): The output file.\n        logfile (str): The log file.\n        config_file (str): The configuration file.\n        count (int): The number of files.\n    \"\"\"\n\n    with open(outfile, 'w') as of:\n        of.write(f\"## method-created: {os.path.abspath(__file__)}\\n\")\n        of.write(f\"## date-created: {str(datetime.today().strftime('%Y-%m-%d-%H%M%S'))}\\n\")\n        of.write(f\"## created-by: {os.environ.get('USER')}\\n\")\n        of.write(f\"## batch-analysis-dir: {analysis_dir}\\n\")\n        of.write(f\"## config-file: {config_file}\\n\")\n        of.write(f\"## logfile: {logfile}\\n\")\n\n        with Progress() as progress:\n            task = progress.add_task(f\"[cyan]Generating report for {count} files\", total=count)\n\n            for f in lookup:\n                md5sum = lookup[f][\"md5sum\"]\n                filesize = lookup[f][\"filesize\"]\n                date_created = lookup[f][\"date_created\"]\n                line = f\"{f}\\nmd5sum: {md5sum}\\nbytesize: {filesize}\\ndate created: {date_created}\"\n\n                of.write(f\"{line}\\n\\n\")\n\n                progress.update(task, advance=1)\n\n    logging.info(f\"Wrote report file '{outfile}'\")\n    print(f\"Wrote report file '{outfile}'\")\n</code></pre>"},{"location":"find_batch_analysis_dir/#bg_helper_utils.find_batch_analysis_dir.main","title":"<code>main(config_file, logfile, outdir, outfile, profile, verbose)</code>","text":"<p>Find the samplesheet.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>Optional[str]</code> <p>The configuration file path.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The output directory.</p> required <code>outfile</code> <code>Optional[str]</code> <p>The output file.</p> required <code>profile</code> <code>Optional[bool]</code> <p>If set to True, will profile all files in the batch analysis directory.</p> required <code>verbose</code> <code>Optional[bool]</code> <p>Will print more info to STDOUT.</p> required Source code in <code>bg_helper_utils/find_batch_analysis_dir.py</code> <pre><code>@click.command()\n@click.option('--config_file', type=click.Path(exists=True), help=f\"Optional: The configuration file for this project - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--logfile', help=\"Optional: The log file\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--outfile', help=\"Optional: The output report file containing profile metadata\")\n@click.option('--profile', is_flag=True, help=f\"Optional: If set to True, will profile all files in the batch analysis directory - default is '{DEFAULT_PROFILE_DIR_FILES}'.\", callback=validate_profile)\n@click.option('--verbose', is_flag=True, help=f\"Optional: Will print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.\", callback=validate_verbose)\ndef main(config_file: Optional[str], logfile: Optional[str], outdir: Optional[str], outfile: Optional[str], profile: Optional[bool], verbose: Optional[bool]):\n    \"\"\"Find the samplesheet.\n\n    Args:\n        config_file (Optional[str]): The configuration file path.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The output directory.\n        outfile (Optional[str]): The output file.\n        profile (Optional[bool]): If set to True, will profile all files in the batch analysis directory.\n        verbose (Optional[bool]): Will print more info to STDOUT.\n    \"\"\"\n    error_ctr = 0\n\n    if error_ctr &gt; 0:\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if outfile is None:\n        outfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.report.txt'\n        )\n        print_yellow(f\"--outfile was not specified and therefore was set to '{outfile}'\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=DEFAULT_LOGGING_FORMAT,\n        level=DEFAULT_LOGGING_LEVEL,\n    )\n\n    check_infile_status(config_file, \"yaml\")\n\n    if verbose:\n        logging.info(f\"Will load contents of config file '{config_file}'\")\n        console.log(f\"Will load contents of config file '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n\n    find_batch_analysis_dir(\n        config_file,\n        config,\n        logfile,\n        outdir,\n        outfile,\n        profile\n    )\n\n    if verbose:\n        console.print(f\"The log file is '{logfile}'\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed\")\n</code></pre>"},{"location":"find_batch_analysis_dir/#bg_helper_utils.find_batch_analysis_dir.profile_dir_files","title":"<code>profile_dir_files(analysis_dir, outfile, logfile, config_file)</code>","text":"<p>Profile all files in the batch analysis directory.</p> <p>Parameters:</p> Name Type Description Default <code>analysis_dir</code> <code>str</code> <p>The batch analysis directory.</p> required <code>outfile</code> <code>str</code> <p>The output file.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>config_file</code> <code>str</code> <p>The configuration file.</p> required Source code in <code>bg_helper_utils/find_batch_analysis_dir.py</code> <pre><code>def profile_dir_files(analysis_dir: str, outfile: str, logfile: str, config_file: str)  -&gt; None:\n    \"\"\"Profile all files in the batch analysis directory.\n\n    Args:\n        analysis_dir (str): The batch analysis directory.\n        outfile (str): The output file.\n        logfile (str): The log file.\n        config_file (str): The configuration file.\n    \"\"\"\n    file_list = get_file_list_from_directory(analysis_dir)\n    if len(file_list) == 0:\n        print_red(f\"Could not find any files in directory '{analysis_dir}'\")\n        sys.exit(0)\n\n    lookup = {}\n\n    count = len(file_list)\n\n    with Progress() as progress:\n        task = progress.add_task(f\"[cyan]Profiling {count} files\", total=count)\n\n        for f in file_list:\n            md5sum = calculate_md5(f)\n            filesize = get_file_size(f)\n            date_created = get_file_creation_date(f)\n            lookup[f] = {\n                \"md5sum\": md5sum,\n                \"filesize\": filesize,\n                \"date_created\": date_created,\n            }\n            progress.update(task, advance=1)\n\n\n    generate_report(lookup, analysis_dir, outfile, logfile, config_file, count)\n</code></pre>"},{"location":"find_batch_analysis_dir/#bg_helper_utils.find_batch_analysis_dir.validate_profile","title":"<code>validate_profile(ctx, param, value)</code>","text":"<p>Validate the profile option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>bg_helper_utils/find_batch_analysis_dir.py</code> <pre><code>def validate_profile(ctx, param, value):\n    \"\"\"Validate the profile option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n    if value is None:\n        click.secho(\"--profile was not specified and therefore was set to 'True'\", fg='yellow')\n        return DEFAULT_PROFILE_DIR_FILES\n    return value\n</code></pre>"},{"location":"find_batch_analysis_dir/#bg_helper_utils.find_batch_analysis_dir.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>bg_helper_utils/find_batch_analysis_dir.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n    if value is None:\n        click.secho(\"--verbose was not specified and therefore was set to 'True'\", fg='yellow')\n        return DEFAULT_VERBOSE\n    return value\n</code></pre>"},{"location":"find_samplesheet/","title":"Find Samplesheet module","text":"<p>Find the samplesheet.</p> <p>Interactively prompts for the batch ID and analysis type and then finds the samplesheet.</p>"},{"location":"find_samplesheet/#bg_helper_utils.find_samplesheet.find_samplesheet","title":"<code>find_samplesheet(config_file, config)</code>","text":"<p>Find the samplesheet.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>the configuration file path</p> required <code>config</code> <code>Dict[str, Any]</code> <p>The configuration</p> required Source code in <code>bg_helper_utils/find_samplesheet.py</code> <pre><code>def find_samplesheet(config_file: str, config: Dict[str, Any]) -&gt; None:\n    \"\"\"Find the samplesheet.\n\n    Args:\n        config_file (str): the configuration file path\n        config (Dict[str, Any]): The configuration\n    \"\"\"\n    if \"base_samplesheet_dir\" not in config:\n        raise Exception(f\"Could not find 'base_samplesheet_dir' in config file '{config_file}'\")\n\n    base_samplesheet_dir = config[\"base_samplesheet_dir\"]\n    check_indir_status(base_samplesheet_dir)\n\n    analysis_type = get_analyis_type()\n    batch_id = get_batch_id()\n\n    if \"samplesheet\" not in config:\n        raise Exception(f\"Could not find 'samplesheet' in config file '{config_file}'\")\n\n    if \"analysis_file_type_mapping\" not in config[\"samplesheet\"]:\n        raise Exception(f\"Could not find 'analysis_file_type_mapping' in 'samplesheet' section in config file '{config_file}'\")\n\n    if analysis_type not in config[\"samplesheet\"][\"analysis_file_type_mapping\"]:\n        raise Exception(f\"Could not find '{analysis_type}' in 'analysis_file_type_mapping' in 'samplesheet' section in config file '{config_file}'\")\n\n    analysis_file_type = config[\"samplesheet\"][\"analysis_file_type_mapping\"][analysis_type]\n\n    samplesheet = os.path.join(\n        base_samplesheet_dir,\n        batch_id,\n        f\"{batch_id}_{analysis_file_type}_samplesheet.csv\"\n    )\n\n    if os.path.exists(samplesheet):\n\n        console.print(f\"\\n[bold green]Found samplesheet[/] '{samplesheet}'\")\n        md5sum = calculate_md5(samplesheet)\n        filesize = get_file_size(samplesheet)\n        date_created = get_file_creation_date(samplesheet)\n        line_count = get_line_count(samplesheet)\n\n        console.print(f\"[yellow]md5sum[/]: {md5sum}\")\n        console.print(f\"[yellow]filesize[/]: {filesize}\")\n        console.print(f\"[yellow]date_created[/]: {date_created}\")\n        console.print(f\"[yellow]line_count[/]: {line_count}\")\n    else:\n        print_red(f\"Could not find samplesheet '{samplesheet}'\")\n</code></pre>"},{"location":"find_samplesheet/#bg_helper_utils.find_samplesheet.main","title":"<code>main(config_file, logfile, outdir, outfile, verbose)</code>","text":"<p>Find the samplesheet.</p> <p>Parameters:</p> Name Type Description Default <code>config_file</code> <code>str</code> <p>The configuration file path.</p> required <code>logfile</code> <code>str</code> <p>The log file.</p> required <code>outdir</code> <code>str</code> <p>The output directory.</p> required <code>outfile</code> <code>str</code> <p>The output file.</p> required <code>verbose</code> <code>bool</code> <p>The verbose flag.</p> required Source code in <code>bg_helper_utils/find_samplesheet.py</code> <pre><code>@click.command()\n@click.option('--config_file', type=click.Path(exists=True), help=f\"The configuration file for this project - default is '{DEFAULT_CONFIG_FILE}'\")\n@click.option('--logfile', help=\"The log file\")\n@click.option('--outdir', help=\"The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--outfile', help=\"The output final report file\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.\", callback=validate_verbose)\ndef main(config_file: str, logfile: str, outdir: str, outfile: str, verbose: bool):\n    \"\"\"Find the samplesheet.\n\n    Args:\n        config_file (str): The configuration file path.\n        logfile (str): The log file.\n        outdir (str): The output directory.\n        outfile (str): The output file.\n        verbose (bool): The verbose flag.\n    \"\"\"\n    error_ctr = 0\n\n    if error_ctr &gt; 0:\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if config_file is None:\n        config_file = DEFAULT_CONFIG_FILE\n        print_yellow(f\"--config_file was not specified and therefore was set to '{config_file}'\")\n\n    check_infile_status(config_file, \"yaml\")\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=DEFAULT_LOGGING_FORMAT,\n        level=DEFAULT_LOGGING_LEVEL,\n    )\n\n    if verbose:\n        logging.info(f\"Will load contents of config file '{config_file}'\")\n        console.print(f\"Will load contents of config file '{config_file}'\")\n    config = yaml.safe_load(pathlib.Path(config_file).read_text())\n\n    find_samplesheet(config_file, config)\n\n    if verbose:\n        console.print(f\"The log file is '{logfile}'\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed\")\n</code></pre>"},{"location":"find_samplesheet/#bg_helper_utils.find_samplesheet.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>bg_helper_utils/find_samplesheet.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n    if value is None:\n        click.secho(\"--verbose was not specified and therefore was set to 'True'\", fg='yellow')\n        return DEFAULT_VERBOSE\n    return value\n</code></pre>"},{"location":"helper/","title":"Helper module","text":""},{"location":"helper/#bg_helper_utils.helper.get_analyis_type","title":"<code>get_analyis_type()</code>","text":"<p>Get the analysis type.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the analysis type</p> Source code in <code>bg_helper_utils/helper.py</code> <pre><code>def get_analyis_type() -&gt; str:\n    \"\"\"Get the analysis type.\n\n    Args:\n        None\n\n    Returns:\n        str: the analysis type\n\n    Raises:\n        None\n    \"\"\"\n    analysis_type = None\n    while analysis_type is None or analysis_type == \"\":\n        analysis_type = input(\"What is the analysis type? : \")\n    return analysis_type.strip()\n</code></pre>"},{"location":"helper/#bg_helper_utils.helper.get_batch_id","title":"<code>get_batch_id()</code>","text":"<p>Get the batch ID type.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the batch ID</p> Source code in <code>bg_helper_utils/helper.py</code> <pre><code>def get_batch_id() -&gt; str:\n    \"\"\"Get the batch ID type.\n\n    Args:\n        None\n\n    Returns:\n        str: the batch ID\n\n    Raises:\n        None\n    \"\"\"\n    batch_id = None\n    while batch_id is None or batch_id == \"\":\n        batch_id = input(\"What is the batch ID? : \")\n    return batch_id.strip()\n</code></pre>"},{"location":"make_shell_scripts_and_aliases/","title":"Make Shell Scripts And Aliases module","text":""},{"location":"make_shell_scripts_and_aliases/#bg_helper_utils.make_shell_scripts_and_aliases.create_aliases_file","title":"<code>create_aliases_file(wrapper_scripts, outdir, prefix=DEFAULT_ALIAS_PREFIX)</code>","text":"<p>Create a file with aliases for the wrapper scripts.</p> <p>Parameters:</p> Name Type Description Default <code>wrapper_scripts</code> <code>List[str]</code> <p>list of wrapper scripts</p> required <code>outdir</code> <code>str</code> <p>output directory</p> required Source code in <code>bg_helper_utils/make_shell_scripts_and_aliases.py</code> <pre><code>def create_aliases_file(wrapper_scripts: List[str], outdir: str, prefix: str = DEFAULT_ALIAS_PREFIX) -&gt; None:\n    \"\"\"Create a file with aliases for the wrapper scripts.\n\n    Args:\n        wrapper_scripts (List[str]): list of wrapper scripts\n        outdir (str): output directory\n    \"\"\"\n    outfile = os.path.join(outdir, f\"{DEFAULT_PROJECT}-aliases.txt\")\n\n    with open(outfile, 'w') as of:\n        of.write(f\"## method-created: {os.path.abspath(__file__)}\\n\")\n        of.write(f\"## date-created: {str(datetime.today().strftime('%Y-%m-%d-%H%M%S'))}\\n\")\n        of.write(f\"## created-by: {os.environ.get('USER')}\\n\")\n        for wrapper_script in wrapper_scripts:\n            alias = os.path.basename(wrapper_script).replace(\".sh\", \"\")\n            line = f\"alias {prefix}-{alias}='bash {wrapper_script}'\"\n            of.write(f\"{line}\\n\")\n\n    print(f\"Wrote aliases file '{outfile}'\")\n</code></pre>"},{"location":"make_shell_scripts_and_aliases/#bg_helper_utils.make_shell_scripts_and_aliases.main","title":"<code>main(alias_prefix)</code>","text":"<p>Create wrapper shell scripts and aliases.</p> Source code in <code>bg_helper_utils/make_shell_scripts_and_aliases.py</code> <pre><code>@click.command()\n@click.option(\n    \"--alias-prefix\",\n    type=str,\n    help=f\"Optional: The prefix to be applied to the aliases - default is '{DEFAULT_ALIAS_PREFIX}'\",\n)\ndef main(alias_prefix: str):\n    \"\"\"Create wrapper shell scripts and aliases.\"\"\"\n    error_ctr = 0\n\n    if error_ctr &gt; 0:\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if alias_prefix is None:\n        alias_prefix = DEFAULT_ALIAS_PREFIX\n        console.print(f\"[bold yellow]--alias-prefix was not specified and therefore was set to '{alias_prefix}'[/]\")\n\n    wrapper_scripts = []\n\n    # Directory where the wrapper scripts will be created\n    wrapper_scripts_dir = os.getcwd()\n    make_script_dir = os.path.dirname(__file__)\n\n    activate_script = os.path.join(\n        make_script_dir,\n        \"..\",\n        \"..\",\n        \"..\",\n        \"..\",\n        \"bin\",\n        \"activate\"\n    )\n\n    if not os.path.exists(activate_script):\n        raise Exception(f\"Activate script '{activate_script}' does not exist\")\n    print(f\"activate_script: {activate_script}\")\n\n    for executable in EXECUTABLES:\n        wrapper_script = create_wrapper_script(executable, activate_script, wrapper_scripts_dir)\n        wrapper_scripts.append(wrapper_script)\n\n    create_aliases_file(wrapper_scripts, os.getcwd(), alias_prefix)\n\n    console.print(f\"[bold green]Execution of {os.path.abspath(__file__)} completed[/]\")\n</code></pre>"},{"location":"progress_bar/","title":"Progress Bar module","text":""},{"location":"progress_bar/#bg_helper_utils.progress_bar.show_progress_bar","title":"<code>show_progress_bar(func, desc, advance=1, items=None)</code>","text":"<p>Display a progress bar to show progress of a function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[[str], None]</code> <p>The function to be called.</p> required <code>desc</code> <code>str</code> <p>The description of the progress bar.</p> required <code>advance</code> <code>int</code> <p>The number of increments to advance the progress bar by. Defaults to 1.</p> <code>1</code> <code>items</code> <code>List[Any]</code> <p>The list of items to be processed. Defaults to None.</p> <code>None</code> Source code in <code>bg_helper_utils/progress_bar.py</code> <pre><code>def show_progress_bar(\n    func: Callable[[str], None],\n    desc: str,\n    advance: int = 1,\n    items: List[Any] = None\n    ) -&gt; None:\n    \"\"\"Display a progress bar to show progress of a function.\n\n    Args:\n        func (Callable[[str], None]): The function to be called.\n        desc (str): The description of the progress bar.\n        advance (int, optional): The number of increments to advance the progress bar by. Defaults to 1.\n        items (List[Any], optional): The list of items to be processed. Defaults to None.\n    \"\"\"\n    with Progress() as progress:\n        task = progress.add_task(f\"[cyan]{desc}\", total=len(items))\n\n        for item in items:\n            # Simulate processing the file (replace this with your actual processing logic)\n            func(item)\n\n            # Update the progress bar\n            progress.update(task, advance=advance)\n</code></pre>"}]}